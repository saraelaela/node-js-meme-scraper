import { ASTUtils } from '@typescript-eslint/utils';
function getFunctionDeclarationOrExpressionByExpression(scope, expression) {
    var _a, _b;
    if (expression.type !== 'Identifier')
        return expression;
    const node = (_b = (_a = ASTUtils.findVariable(scope, expression)) === null || _a === void 0 ? void 0 : _a.defs[0]) === null || _b === void 0 ? void 0 : _b.node;
    return (node === null || node === void 0 ? void 0 : node.type) === 'VariableDeclarator' ? node.init : node;
}
const rule = {
    defaultOptions: [],
    meta: {
        docs: {
            description: 'Prevent default form submission behavior by enforcing usage of `event.preventDefault()`',
            url: 'https://github.com/upleveled/eslint-plugin-upleveled/blob/main/docs/rules/no-submit-handler-without-preventDefault.md',
        },
        messages: {
            noSubmitHandlerWithoutPreventDefault: 'This form submit handler does not call event.preventDefault()',
        },
        type: 'suggestion',
        schema: [
            {
                type: 'object',
                properties: {},
                additionalProperties: false,
            },
        ],
    },
    create(context) {
        return {
            // eslint-disable-next-line @typescript-eslint/naming-convention
            JSXAttribute(node) {
                var _a;
                if (node.parent.type === 'JSXOpeningElement' &&
                    node.parent.name.type === 'JSXIdentifier' &&
                    node.parent.name.name === 'form' &&
                    node.name.name === 'onSubmit' &&
                    ((_a = node.value) === null || _a === void 0 ? void 0 : _a.type) === 'JSXExpressionContainer') {
                    const submitHandlerFunction = getFunctionDeclarationOrExpressionByExpression(context.getScope(), node.value.expression);
                    // Early return for non-function nodes
                    if (!submitHandlerFunction ||
                        !(submitHandlerFunction.type === 'FunctionDeclaration' ||
                            submitHandlerFunction.type === 'FunctionExpression' ||
                            submitHandlerFunction.type === 'ArrowFunctionExpression') ||
                        submitHandlerFunction.body.type !== 'BlockStatement') {
                        return;
                    }
                    const firstFunctionParameter = submitHandlerFunction.params[0];
                    if (
                    // No function parameters
                    submitHandlerFunction.params.length < 1 ||
                        // First function parameter is not an identifier
                        (firstFunctionParameter === null || firstFunctionParameter === void 0 ? void 0 : firstFunctionParameter.type) !== 'Identifier' ||
                        // Function body does not contain a call to event.preventDefault()
                        !submitHandlerFunction.body.body.some((bodyNode) => {
                            return (bodyNode.type === 'ExpressionStatement' &&
                                bodyNode.expression.type === 'CallExpression' &&
                                bodyNode.expression.callee.type === 'MemberExpression' &&
                                bodyNode.expression.callee.object.type === 'Identifier' &&
                                bodyNode.expression.callee.object.name ===
                                    firstFunctionParameter.name &&
                                bodyNode.expression.callee.property.type === 'Identifier' &&
                                bodyNode.expression.callee.property.name === 'preventDefault');
                        })) {
                        context.report({
                            node: submitHandlerFunction,
                            messageId: 'noSubmitHandlerWithoutPreventDefault',
                        });
                    }
                }
            },
        };
    },
};
export default rule;
